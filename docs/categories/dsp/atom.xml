<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Biao J.&#x27;s Online Portfolio - DSP</title>
    <subtitle>Hi, I&#x27;m a senior data scientist, researcher. I exclusively utilize Rust, Go, and Python for their distinct strengths in various tasks. Additionally, I harness the potent capabilities of LaTeX&#x2F;TikZ to produce visually stunning and insightful technical documents.</subtitle>
    <link rel="self" type="application/atom+xml" href="https://plotsignal.com/categories/dsp/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://plotsignal.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2018-05-06T11:15:00+00:00</updated>
    <id>https://plotsignal.com/categories/dsp/atom.xml</id>
    <entry xml:lang="en">
        <title>Implementing the Zoom FFT mixer approach in Python</title>
        <published>2018-05-06T11:15:00+00:00</published>
        <updated>2018-05-06T11:15:00+00:00</updated>
        
        <author>
          <name>
            Biao Jiang
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://plotsignal.com/projects/zoom-fft/"/>
        <id>https://plotsignal.com/projects/zoom-fft/</id>
        
        <content type="html" xml:base="https://plotsignal.com/projects/zoom-fft/">&lt;h2 id=&quot;zoom-fft&quot;&gt;Zoom FFT&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;se.mathworks.com&#x2F;help&#x2F;dsp&#x2F;examples&#x2F;zoom-fft.html&quot;&gt;Zoom FFT&lt;&#x2F;a&gt; was used to analyze a frequency subband. The idea behind zoom FFT is to retain the exact resolution, which could be achieved with a full-size FFT on the original signal, by computing a small-size FFT on a down-sampled shorter signal. Thus, the efficiency of FFT could be improved while maintaining the exact resolution.&lt;&#x2F;p&gt;
&lt;p&gt;This is intuitive: for a decimation factor of $D$, the new sampling rate is $f_{sd} = f_s&#x2F;D$, and the new frame size (and FFT length) is $L_d = L&#x2F;D$, so the resolution of the decimated signal is $f_{sd}&#x2F;L_d = f_s&#x2F;L$.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;the-mixer-approach&quot;&gt;The Mixer Approach&lt;&#x2F;h3&gt;
&lt;p&gt;See &lt;a href=&quot;https:&#x2F;&#x2F;se.mathworks.com&#x2F;help&#x2F;dsp&#x2F;examples&#x2F;zoom-fft.html&quot;&gt;Zoom FFT&lt;&#x2F;a&gt;: The popular mixer Zoom FFT method consists of first shifting the band of interest down to DC using a mixer and then performing lowpass filtering and decimation by a factor of BWFactor (using an efficient polyphase FIR decimation structure).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt; For short signals, the polyphase FIR design is tricky. Sometimes, it will distort the spectrum. In the Matlab example, the transient filtering effects were eliminated by repeating the filtering ten times. So, the conventional Fourier resampling method is recommended here.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;python-codes&quot;&gt;Python Codes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Import modules&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;numpy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;np
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;matplotlib &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;pyplot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;plt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;numpy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;pi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;numpy.fft &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;fft, fftfreq, fftshift
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;scipy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;signal
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Generate signal&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;SineWave&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fs&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;amplitude&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    x = amplitude * np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sin&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* pi * f &#x2F; fs * np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arange&lt;&#x2F;span&gt;&lt;span&gt;(length))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;x
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;L = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32
&lt;&#x2F;span&gt;&lt;span&gt;fs = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;128
&lt;&#x2F;span&gt;&lt;span&gt;res = fs&#x2F;L
&lt;&#x2F;span&gt;&lt;span&gt;f1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;40
&lt;&#x2F;span&gt;&lt;span&gt;f2 = f1 + res
&lt;&#x2F;span&gt;&lt;span&gt;x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SineWave&lt;&#x2F;span&gt;&lt;span&gt;(f1, fs, L) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SineWave&lt;&#x2F;span&gt;&lt;span&gt;(f2, fs, L, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Plot the original FFT&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;X = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fft&lt;&#x2F;span&gt;&lt;span&gt;(x)
&lt;&#x2F;span&gt;&lt;span&gt;freq = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fftfreq&lt;&#x2F;span&gt;&lt;span&gt;(L, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;fs)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fig1, ax1 = plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;subplots&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#fig1.clf()
&lt;&#x2F;span&gt;&lt;span&gt;ax1[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stem&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fftshift&lt;&#x2F;span&gt;&lt;span&gt;(freq), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fftshift&lt;&#x2F;span&gt;&lt;span&gt;(X)) &#x2F; L)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#ax1[0].set_xlabel(&amp;#39;Frequency (Hz)&amp;#39;, fontsize=12)
&lt;&#x2F;span&gt;&lt;span&gt;ax1[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_ylabel&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Magnitude&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fontsize&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;ax1[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_title&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Two-sided spectrum&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fontsize&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;ax1[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grid&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Zoom FFT using a mixer approach&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;BWOfInterest = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;48 &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16
&lt;&#x2F;span&gt;&lt;span&gt;Fc = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;48&lt;&#x2F;span&gt;&lt;span&gt;) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;BWFactor = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span&gt;(fs &#x2F; BWOfInterest).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;astype&lt;&#x2F;span&gt;&lt;span&gt;(np.uint8)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# mix the signal down to DC and filter it through the FIR decimator
&lt;&#x2F;span&gt;&lt;span&gt;indVect = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arange&lt;&#x2F;span&gt;&lt;span&gt;(L)
&lt;&#x2F;span&gt;&lt;span&gt;y = x * np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exp&lt;&#x2F;span&gt;&lt;span&gt;(-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;j &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* pi * indVect * Fc &#x2F; fs)
&lt;&#x2F;span&gt;&lt;span&gt;xd = signal.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resample&lt;&#x2F;span&gt;&lt;span&gt;(y, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# polyphase method as in Matlab
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#indVect = np.arange(L * 10)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#y = np.tile(x, 10) * np.exp(-1j * 2 * pi * indVect * Fc &#x2F; fs)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#beta = signal.kaiser_beta(80)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#xd = signal.resample_poly(y, up=1, down=BWFactor, window=signal.get_window((&amp;#39;kaiser&amp;#39;, beta), 6))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#xd = xd[-len(xd) &#x2F;&#x2F; 10:]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#xd = xd[-2 * len(xd) &#x2F;&#x2F; 10:-len(xd) &#x2F;&#x2F; 10]
&lt;&#x2F;span&gt;&lt;span&gt;fftlen = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(xd)
&lt;&#x2F;span&gt;&lt;span&gt;Xd = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fft&lt;&#x2F;span&gt;&lt;span&gt;(xd)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Ld  = L &#x2F; BWFactor;
&lt;&#x2F;span&gt;&lt;span&gt;fsd = fs &#x2F; BWFactor;
&lt;&#x2F;span&gt;&lt;span&gt;F   = Fc + fsd &#x2F; fftlen * np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arange&lt;&#x2F;span&gt;&lt;span&gt;(fftlen) - fsd &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;ax1[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stem&lt;&#x2F;span&gt;&lt;span&gt;(F, np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fftshift&lt;&#x2F;span&gt;&lt;span&gt;(Xd)) &#x2F; Ld, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;linefmt&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;C1-.&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;markerfmt&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;C1s&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;ax1[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grid&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;ax1[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_xlabel&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Frequency (Hz)&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fontsize&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;ax1[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_ylabel&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Magnitude&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fontsize&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;ax1[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_title&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Zoom FFT Spectrum. Mixer Approach.&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fontsize&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;fig1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;subplots_adjust&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hspace&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.35&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;result&quot;&gt;Result&lt;&#x2F;h3&gt;
&lt;p&gt;The following result is the same as in &lt;a href=&quot;https:&#x2F;&#x2F;se.mathworks.com&#x2F;help&#x2F;dsp&#x2F;examples&#x2F;zoom-fft.html&quot;&gt;Zoom FFT&lt;&#x2F;a&gt; but much faster.&lt;&#x2F;p&gt;
&lt;!-- templates&#x2F;shortcodes&#x2F;imshow_rel.html, show relative scaled image --&gt;

    
    
    



 &lt;!-- no resize to keep picture sharp--&gt;






&lt;figure&gt;
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;plotsignal.com&amp;#x2F;processed_images&amp;#x2F;zoom_fft_mixer_approach.bd40e35e6b874531.png&quot;alt=&quot;Zoom-FFT with the mixer approach&quot;
    title=&quot;Zoom-FFT with the mixer approach&quot;
  &#x2F;&gt;&lt;figcaption&gt;Zoom-FFT with the mixer approach&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;

</content>
        
    </entry>
</feed>
